/*
 * Gallop API
 *
 * Data and insights APIs, webooks, and dashboards enabling businesses to launch tokenized products in seconds.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@higallop.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct GetEthCollectionListingsOhlcRequest {
    /// The Ethereum contract address to identify the collection.
    #[serde(rename = "collection_address")]
    pub collection_address: String,
    /// If `true`, report only historical floor prices. Otherwise, report OHFC candlesticks, number of active listings, number of unique owners and the average age of open listings.
    #[serde(rename = "floor_only", skip_serializing_if = "Option::is_none")]
    pub floor_only: Option<bool>,
    /// The interval at which to return Floor prices / OHLF, e.g. `1D` for daily, `1M` for monthly etc. Must be >= `6H`
    #[serde(rename = "frequency", skip_serializing_if = "Option::is_none")]
    pub frequency: Option<String>,
    /// The currency to report results in
    #[serde(rename = "rept_curr", skip_serializing_if = "Option::is_none")]
    pub rept_curr: Option<ReptCurr>,
    /// The ISO 8601 start date/datetime to return results for
    #[serde(rename = "report_start_date", skip_serializing_if = "Option::is_none")]
    pub report_start_date: Option<String>,
    /// The ISO 8601 end date/datetime to return results for
    #[serde(rename = "report_end_date", skip_serializing_if = "Option::is_none")]
    pub report_end_date: Option<String>,
}

impl GetEthCollectionListingsOhlcRequest {
    pub fn new(collection_address: String) -> GetEthCollectionListingsOhlcRequest {
        GetEthCollectionListingsOhlcRequest {
            collection_address,
            floor_only: None,
            frequency: None,
            rept_curr: None,
            report_start_date: None,
            report_end_date: None,
        }
    }
}

/// The currency to report results in
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ReptCurr {
    #[serde(rename = "eth")]
    Eth,
    #[serde(rename = "usd")]
    Usd,
}

impl Default for ReptCurr {
    fn default() -> ReptCurr {
        Self::Eth
    }
}

