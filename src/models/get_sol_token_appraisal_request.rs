/*
 * Gallop API
 *
 * Data and insights APIs, webooks, and dashboards enabling businesses to launch tokenized products in seconds.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@higallop.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct GetSolTokenAppraisalRequest {
    /// List of mint addresses of tokens to appraise
    #[serde(rename = "mint_address")]
    pub mint_address: Vec<String>,
    /// The currency to report results in
    #[serde(rename = "rept_curr", skip_serializing_if = "Option::is_none")]
    pub rept_curr: Option<ReptCurr>,
    /// The interval at which to calculate intermediate results and forecasts.
    #[serde(rename = "frequency", skip_serializing_if = "Option::is_none")]
    pub frequency: Option<String>,
    /// The forecast horizon (i.e. the number of periods to forecast out). Defaults to zero which only returns nowcasts.
    #[serde(rename = "horizon", skip_serializing_if = "Option::is_none")]
    pub horizon: Option<i32>,
    /// The significance level for the liquidation estimate, e.g. 0.05 for 95% confidence
    #[serde(rename = "alpha", skip_serializing_if = "Option::is_none")]
    pub alpha: Option<f32>,
    /// Exclude suspected wash transactions?
    #[serde(rename = "exclude_wash", skip_serializing_if = "Option::is_none")]
    pub exclude_wash: Option<bool>,
}

impl GetSolTokenAppraisalRequest {
    pub fn new(mint_address: Vec<String>) -> GetSolTokenAppraisalRequest {
        GetSolTokenAppraisalRequest {
            mint_address,
            rept_curr: None,
            frequency: None,
            horizon: None,
            alpha: None,
            exclude_wash: None,
        }
    }
}

/// The currency to report results in
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ReptCurr {
    #[serde(rename = "sol")]
    Sol,
    #[serde(rename = "usd")]
    Usd,
}

impl Default for ReptCurr {
    fn default() -> ReptCurr {
        Self::Sol
    }
}

